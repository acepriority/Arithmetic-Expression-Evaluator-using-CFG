# -*- coding: utf-8 -*-
"""regex.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1brSw-pamCj9d91Kw1Q-qPvOsHDIghjeg
"""

import re
"""
expression -> term
            | expression + term
            | expression - term

term -> factor
      | term * factor
      | term / factor

factor -> num
        | (expression)
"""

def evaluate_expression(expression):
    #Context Free Grammar definition
    def parse_expression(tokens):
        term_value = parse_term(tokens)
        while tokens and tokens[0] in {'+', '-'}:
            operator = tokens.pop(0)
            term_value = eval(f"{term_value} {operator} {parse_term(tokens)}")
        return term_value

    def parse_term(tokens):
        factor_value = parse_factor(tokens)
        while tokens and tokens[0] in {'*', '/'}:
            operator = tokens.pop(0)
            factor_value = eval(f"{factor_value} {operator} {parse_factor(tokens)}")
        return factor_value

    def parse_factor(tokens):
        token = tokens.pop(0)
        if token.isdigit():
            return int(token)
        elif token == '(':
            result = parse_expression(tokens)
            tokens.pop(0)  # Consume ')'
            return result
        else:
            raise ValueError("Invalid token")

    # Tokenize the expression
    tokens = re.findall(r'\d+|\S', expression)

    # Evaluate the expression
    return parse_expression(tokens)

expression = '2+2+2+2'
result = evaluate_expression(expression)
print(result)

import re

pattern = r'^[1-5][0-5]{3,}|[1-5]{4,}|[3](?!00)[0-5]{2,}|[45][0-5]{2,}$'

test_string = "2000"

if re.match(pattern, test_string):
    print("Match found:", test_string)
else:
    print("No match found:", test_string)

import re

pattern = r'^[a-zA-Z0-9]+\@[a-z]+\.[a-z]{2,3}$'
test_string = "beheramzena07@gmail.com"

if re.match(pattern, test_string):
    print("Match found:", test_string)
else:
    print("No match found:", test_string)

"""
All number strings with value 5, regex = r'^.*5.*$'
All number strings that don't have the value x, regex = r'(?!.*x).*'
"""

import re
import random

print("_________________________________________________________________________")
print("_________________________________________________________________________")
print("WELCOME")
print("_________________________________________________________________________")
print("_________________________________________________________________________")
print("**Instructions**")
print("1. You have 10 chances to guess a 4-digit number.")
print("2. After each guess, I'll tell you how many digits are in the right place.")
print("_________________________________________________________________________")
print("Let's get started!")
print("                                                                         ")
print("                                                                         ")
print("                                                                         ")
print("                                                                         ")


def generate_random_number():
    return str(random.randint(1000, 9999))


def get_user_input(prompt):
    user_input = input(prompt)
    pattern = r'^\d{4}$'

    if re.match(pattern, user_input):
        return user_input
    else:
        print("Enter a value of 4 digits: ", user_input)
        return get_user_input(prompt)


def check_guess(number, user_input):
    correct_values = 0

    for i in range(len(number)):
        if number[i] == user_input[i]:
            correct_values += 1

    if number == user_input:
        print("You guessed Right!")
        return True
    else:
        print(f"{correct_values} digit(s) in the right place")
        return False


def play_game():
    while True:
        number = generate_random_number()
        chances = 5
        while chances > 0:
            user_input = get_user_input("Guess the number: ")
            if check_guess(number, user_input):
                return True # Exit the loop if the guess is correct
            chances -= 1
            print(f"You have {chances} chances left.")
            print("_________________________________________________________________________")
            print("_________________________________________________________________________")

        print("                                                                         ")
        print("                                                                         ")
        print("SORRY, you've run out of chances.")
        print(" The correct number was:", number)
        print("                                                                         ")
        print("                                                                         ")
        play_again = input("Do you want to play again? (yes/no): ")
        if play_again.lower() != 'yes':
            return False


def main():
    while True:
        if not play_game():
            break
        play_again = input("Do you want to play again? (yes/no): ")
        if play_again.lower() != 'yes':
            break
    print("_________________________________________________________________________")
    print("Untill we meet again")

if __name__ == "__main__":
    main()

import re

pattern = r'^\(\+[0-9]{1,3}\)\ [0-9]{9}$'

test_string = "(+256) 753315231"

if re.match(pattern, test_string):
    print("Match found:", test_string)
else:
    print("No match found:", test_string)

import random
import string

def generate_random_string():
    random_letters = ''.join(random.choices(string.ascii_uppercase, k=2))
    random_digits = ''.join(random.choices(string.digits, k=9))
    random_letter = ''.join(random.choices(string.ascii_uppercase, k=1))
    return random_letters + random_digits + random_letter

random_string = generate_random_string()
print("Random string:", random_string)